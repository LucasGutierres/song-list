{"version":3,"sources":["emitter.js","searchBar.js","Item.js","List.js","utils.js","Container.js","App.js","serviceWorker.js","index.js"],"names":["EventEmitter","options","Searchbar","props","state","media","query","renderSearchOption","map","opt","key","className","href","tabIndex","role","onClick","_onClick","ticking","rAf","emitSearch","emitter","emit","e","setState","target","textContent","length","_update","value","_","_onChange","window","requestAnimationFrame","cancelAnimationFrame","this","s","placeholder","onChange","trigger","id","waves","style","width","marginTop","React","PureComponent","SongItem","m","horizontal","header","alt","src","artworkUrl100","height","trackName","collectionName","artistName","AlbumItem","ArtistItem","Item","setItem","bind","data","kind","collectionType","artistType","createItem","List","results","resultCount","item","i","trackId","getApiUrl","split","join","str","getMedia","Container","status","headerState","fetch","resp","json","on","getSearchResult","removeListener","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af7ea6db.chunk.js","sourcesContent":["import EventEmitter from 'events';\r\n\r\nexport default new EventEmitter();","//@flow\r\nimport React from 'react';\r\nimport './searchBar.css'\r\nimport { TextInput, Col, Row, Button, Dropdown } from 'react-materialize'\r\nimport type { HeaderState, SearchOption } from './type'\r\nimport emitter from './emitter.js'\r\n\r\nconst options: Array<SearchOption> = [\r\n  'Música',\r\n  'Álbum',\r\n  'Artista'\r\n];\r\n\r\nclass Searchbar extends React.PureComponent<{}, HeaderState> {\r\n\temitSearch: () => void;\r\n  _onChange: (e: Object) => void;\r\n  _onClick: (e: Object) => void;\r\n  _update: (e: Object) => Function;\r\n  ticking: boolean;\r\n  rAf: any;\r\n\r\n  state: HeaderState = {\r\n    media: 'Música',\r\n    query: ''\r\n  };\r\n\r\n  constructor(props: Object) {\r\n    super(props);\r\n    this.ticking = false;\r\n    this.rAf = null;\r\n    this.emitSearch = () => emitter.emit('onchange', this.state);\r\n    this._onClick = e => this.setState(\r\n      { media: e.target.textContent },\r\n      () => (this.state.query.length ? this.emitSearch() : null)\r\n    );\r\n    this._update = ({ target: { value: query } }) => _ => {\r\n      this.setState({ query }, () => query.length !== 0 && this.emitSearch());\r\n      this.ticking = false;\r\n    };\r\n    this._onChange = e => {\r\n      if (!this.ticking) {\r\n        this.rAf = window.requestAnimationFrame(this._update(e));\r\n        this.ticking = true;\r\n      }\r\n    };\r\n  }\r\n\r\n  renderSearchOption = () => options.map(opt =>\r\n    <li\r\n      key={opt}\r\n      className={this.state.media === opt ? 'select' : ''}\r\n    >\r\n      <a\r\n      \thref='/#'\r\n        tabIndex=\"0\"\r\n        role=\"button\"\r\n        onClick={this._onClick}\r\n      >\r\n        {opt}\r\n      </a>\r\n    </li>);\r\n\r\n  componentWillUnmount() {\r\n    window.cancelAnimationFrame(this.rAf);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    \t<Row>\r\n\t\t    <Col className='searchWrapper' s={12}>\r\n\t\t\t\t\t<TextInput className='searchBox' s={8} value={this.state.value} placeholder='Type to search...' onChange={this._onChange}/>\r\n\t\t\t\t\t<Dropdown trigger={<Button id='openSelect' waves='light' style={{width: '33%', marginTop: '4%'}} s={4}>{this.state.media}</Button>}>\r\n\t\t\t\t\t  <ul>\r\n            \t{this.renderSearchOption()}\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</Dropdown>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Searchbar;","// @flow\r\nimport React from 'react';\r\nimport type { HeaderState, SearchResult } from './type';\r\nimport { Col, Row, Card } from 'react-materialize'\r\n\r\nconst SongItem = (props: SearchResult) => (\r\n  <Row>\r\n    <Col m={6} s={12}>\r\n      <Card horizontal \r\n        header={<img alt='Cover' src={props.artworkUrl100} style={{width:'100px',height:'100px'}} />}>\r\n        <p className=\"card-title activator grey-text text-darken-4\">{props.trackName}</p>\r\n        <p>Álbum: {props.collectionName}</p>\r\n        <p>{props.artistName}</p>\r\n      </Card>\r\n    </Col>\r\n  </Row>\r\n)\r\n\r\nconst AlbumItem = (props: SearchResult) => (\r\n  <Row>\r\n    <Col m={6} s={12}>\r\n      <Card horizontal \r\n        header={<img alt='Capa' src={props.artworkUrl100} style={{width:'100px',height:'100px'}} />}>\r\n        <p className=\"card-title activator grey-text text-darken-4\">{props.collectionName}</p>\r\n        <p>{props.artistName}</p>\r\n      </Card>\r\n    </Col>\r\n  </Row>\r\n)\r\n\r\nconst ArtistItem = (props: SearchResult) => (\r\n  <Row>\r\n    <Col m={6} s={12}>\r\n      <Card>\r\n        <p className=\"card-title activator grey-text text-darken-4\">{props.artistName}</p>\r\n      </Card>\r\n    </Col>\r\n  </Row>\r\n)\r\n\r\nclass Item extends React.PureComponent<{}, HeaderState>{\r\n  constructor(props: Object) {\r\n    super(props);\r\n    this.setItem = this.setItem.bind(this);\r\n  }\r\n\r\n  setItem (data: Object) {\r\n    if (data.kind === 'song') {\r\n      return <SongItem {...data}/>\r\n    } else if (data.collectionType === 'Album') {\r\n      return <AlbumItem {...data}/>;\r\n    } else if (data.artistType === 'Artist') {\r\n      return <ArtistItem {...data}/>;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const createItem = this.setItem(this.props)\r\n    return (\r\n    <div>\r\n      {createItem}\r\n    </div>\r\n\t\t);\r\n  }\r\n}\r\n\r\nexport default Item","// @flow\r\nimport React from 'react';\r\nimport Item from './Item';\r\nimport type { SearchResult } from './type';\r\n\r\nconst List = ({\r\n\tresults,\r\n\tresultCount\r\n}: {\r\n\tresults: Array<SearchResult>,\r\n\tresultCount: number\r\n}) => (\r\n\t<div>\r\n\t\t{resultCount > 0 ? results.map((item, i) => <Item key={item.trackId || i} {...item} />) : null}\r\n\t</div>\r\n);\r\n\r\nexport default List;","// @flow\r\nimport type { HeaderState } from './type';\r\n\r\nfunction getMedia(str: string): string {\r\n  switch (str){\r\n    default:\r\n      return str='all';\r\n    case 'Música':\r\n      return str='song';\r\n    case 'Álbum':\r\n      return str='album'\r\n    case 'Artista':\r\n      return str='musicArtist'\r\n  }\r\n}\r\n\r\nexport const getApiUrl = ({\r\n  media,\r\n  query\r\n}: HeaderState) => `https://itunes.apple.com/search?media=music&term=${query.split(' ').join('+')}&entity=${getMedia(media)}`;","// @flow\r\nimport React from 'react';\r\nimport List from './List';\r\nimport emitter from './emitter'\r\nimport { getApiUrl } from './utils'\r\nimport type { HeaderState, ContainerState } from './type'\r\n\r\nclass Container extends React.PureComponent<{}, ContainerState> {\r\n  state: ContainerState = {\r\n    status: 'init',\r\n    data: {}\r\n  };\r\n\r\n  async getSearchResult(headerState: HeaderState) {\r\n    try {\r\n      this.setState({ status: 'loading' });\r\n      const resp = await fetch(getApiUrl(headerState));\r\n      const json = await resp.json();\r\n      this.setState({\r\n        data: { ...json },\r\n        status: json.resultCount ? '' : 'noContent'\r\n      });\r\n    } catch (e) {\r\n      this.setState({ status: 'error' });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    emitter.on('onchange', this.getSearchResult.bind(this));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    emitter.removeListener('onchange');\r\n  }\r\n\r\nrender() {\r\n    const { data } = this.state;\r\n    return (\r\n      <div>\r\n        <List {...data} />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Container;","import React from 'react';\nimport Searchbar from './searchBar.js';\nimport Container from './Container.js'\n\nconst App = () => {\n  return (\n    <div>\n      <Searchbar />\n      <Container />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}